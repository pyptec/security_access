C51 COMPILER V9.59.0.0   MAIN                                                              05/27/2021 15:12:47 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /*------------------------------------------------------------------------------
   2          MAIN.C:  sistema verificador
   3          
   4          Diseñado Ing. Jaime Pedraza
   5          ------------------------------------------------------------------------------*/
   6          #include <main.h>
   7          /*------------------------------------------------------------------------------
   8          interrupcion por timer 
   9          ValTimeOutCom se decrementa cada overflow de la interrupcion
  10          Timer_wait    Incrementa cada overflow de la interrrupcion
  11          clock=22.1184mhz
  12          ciclo de mqn= clock/12 =0.5nseg
  13          timer= ciclo mqn* reloj = 0.5 x65535 =32
  14          temporizado=timer* ValTimeOutCom = 32*100=320ms
  15          ------------------------------------------------------------------------------*/
  16           timer0_int() interrupt 1 using 2
  17              {
  18   1            
  19   1            ValTimeOutCom--;
  20   1            if (ValTimeOutCom == 1)
  21   1            {
  22   2              Timer_wait++;
  23   2            }
  24   1            
  25   1            Timer_tivo++;
  26   1            TF0=0;
  27   1            
  28   1          }
  29          /*------------------------------------------------------------------------------
  30          ------------------------------------------------------------------------------*/
  31          void ini_timer(void)
  32          {
  33   1      
  34   1        TMOD=(TMOD & 0xF0) | 0x01;// configuro el reg TMOD sin precalador a 16 bits
  35   1          
  36   1        TH0=0X00;               //registro de la parte alta del timer0 de 16 bits                 *           
  37   1        TL0=0X00;               // registro de la parte baja del timer0
  38   1        TR0=1;                  // habilita el timer0 reg TCOM bit 4 para interrup
  39   1      
  40   1      }
  41          /*------------------------------------------------------------------------------
  42          ------------------------------------------------------------------------------*/
  43          void on_Timer0_Interrup(void)
  44          {
  45   1        TF0=0;                  //registro TCON bit 5 bandera de overflow 
  46   1        ET0=1;                  // enable interrupcion bit 1 del registro IENO
  47   1        
  48   1      }
  49          /*------------------------------------------------------------------------------
  50          ------------------------------------------------------------------------------*/
  51          void off_Timer0_Interrup(void)
  52          {
  53   1        ET0=0;                  // enable interrupcion bit 1 del registro IENO
  54   1        
C51 COMPILER V9.59.0.0   MAIN                                                              05/27/2021 15:12:47 PAGE 2   

  55   1      }
  56          /*------------------------------------------------------------------------------
  57          ------------------------------------------------------------------------------*/
  58          /*------------------------------------------------------------------------------
  59          _getkey waits until a character is received from the serial port.  This may not
  60          be the exact desired operation (for example if the buffer is empty, this
  61          function hangs waiting for a character to be received).
  62          ------------------------------------------------------------------------------*/
  63          char _getkey (void)
  64          {
  65   1      int k;
  66   1      
  67   1      do
  68   1        {
  69   2        k = com_getchar ();
  70   2        }
  71   1      while (k == -1);
  72   1      
  73   1      return ((unsigned char) k);
  74   1      }
  75          
  76          /*------------------------------------------------------------------------------
  77          ------------------------------------------------------------------------------*/
  78          char putchar (char c)
  79          {
  80   1      volatile unsigned int i;
  81   1      
  82   1      while (com_putchar (c) != 0)
  83   1        {
  84   2        for (i=0; i<1000; i++)
  85   2          {
  86   3          /*** DO NOTHING ***/
  87   3          }
  88   2        }
  89   1      
  90   1      return (c);
  91   1      }
  92          /*------------------------------------------------------------------------------
  93          escribir una cadena de datos por pto serie
  94          ------------------------------------------------------------------------------*/
  95          void EscribirCadenaSoft_buffer(unsigned char *buffer,unsigned char tamano_cadena)
  96          {
  97   1        unsigned char i,d;
  98   1          for(i=0;i<tamano_cadena;i++)
  99   1          {
 100   2            d=putchar(*buffer);
 101   2            buffer++;
 102   2          }
 103   1      }
 104          
 105          /*------------------------------------------------------------------------------
 106          Rutina de las condiciones iniciales del board
 107          ------------------------------------------------------------------------------*/
 108          void inicia_board(void)
 109          {
 110   1      cond_ini_tibbo();             /* inicia tibbo*/
 111   1      cond_ini_clock();             /* inicia clock*/
 112   1      cond_ini_pto();               /*Inicializacion del pto*/
 113   1      Atascado_GP0_PIN_3 = 0;                   /*prendo el verificador*/
 114   1      sel_com=1;                    /*seleccionar el pto serie */
 115   1      lock=0;                       /*barrera off*/ 
 116   1        
C51 COMPILER V9.59.0.0   MAIN                                                              05/27/2021 15:12:47 PAGE 3   

 117   1      }
 118          
 119          /*------------------------------------------------------------------------------
 120          Rutina que lee la eeprom, los bit de configuracion 
 121          ------------------------------------------------------------------------------*/
 122          void variable_inicio()
 123          {
 124   1        
 125   1        
 126   1        T_GRACIA=rd_eeprom(0xa8,EE_TIEMPO_GRACIA);
 127   1        SIN_COBRO=rd_eeprom(0xa8,EE_SIN_COBRO);
 128   1        Debug_Tibbo=rd_eeprom(0xa8,EE_DEBUG);
 129   1        USE_LPR=rd_eeprom(0xa8,EE_USE_LPR);
 130   1        Raspberry = rd_eeprom(0xa8,EE_TIPO_PANTALLA);
 131   1        
 132   1      }
 133          /*------------------------------------------------------------------------------
 134          Note that the two function above, _getkey and putchar, replace the library
 135          functions of the same name.  These functions use the interrupt-driven serial
 136          I/O routines in SIO.C.
 137          ------------------------------------------------------------------------------*/
 138          
 139          
 140          void main (void)
 141          {
 142   1        
 143   1        static unsigned char buffer[40];
 144   1        static unsigned char Estado_Comunicacion_Secuencia_MF=SEQ_INICIO;
 145   1        unsigned char Length_trama;
 146   1      
 147   1        
 148   1      ini_timer();                                                              /* initialize interrupt timer0 */
 149   1      on_Timer0_Interrup();                                                     /* habilita el  timer0 */
 150   1      com_initialize ();                                                        /* initialize pto serie */
 151   1      com_baudrate ();                                                          /* setup for 9600 baud */
 152   1      inicia_board();                                                           /*Rutina de las condiciones iniciales del board*/
 153   1      EA = 1;                                                                   /* Enable Interrupts global*/
 154   1      
 155   1      time_bit();                                                               /*solo para pruebas*/
 156   1      Delay_20us(33);
 157   1      time_mbit();
 158   1      //  Debug_txt_Tibbo((unsigned char *) "pqui estoy");  
 159   1      tx_aux('a');  
 160   1      
 161   1      sel_Funcion();                                                              /*el pulsador funcion es el cmd q da la entrada a programacio
             -n */
 162   1        
 163   1        if (DataIn==0)              
 164   1        {
 165   2        menu();                                                                   /*menu de configuracion*/
 166   2        }
 167   1      
 168   1      
 169   1        variable_inicio();                                                        /*leo y cargo  las variables de inicio de configuracion*/
 170   1      while(Secuencia_inicio_expedidor());                                        /* procedimiento de inicio de transporte (reset, y
             - grabar eeprom)*/
 171   1        ValTimeOutCom=TIME_CARD;
 172   1                                                    
 173   1        while (1)                                                                 /* Loop Principal               */  
 174   1        {   
 175   2        
 176   2              
C51 COMPILER V9.59.0.0   MAIN                                                              05/27/2021 15:12:47 PAGE 4   

 177   2              if (rx_ip==0)                                                         /*pregunto si llega datos de monitor pto serie emulado*/
 178   2              {
 179   3                 Rx_Monitor();
 180   3              }
 181   2              
 182   2            
 183   2                
 184   2              Estado_Comunicacion_Secuencia_MF=SecuenciaExpedidorMF(Estado_Comunicacion_Secuencia_MF);          //Secuenc
             -iaExpedidor();
 185   2              
 186   2                  
 187   2                                                          
 188   2            
 189   2              if ((busy == 0) && (pto_paraleo == 0))                              /*comunicacion con el pto paralelo*/
 190   2              {
 191   3            
 192   3              Length_trama=recibe_port(buffer);                                   /*recibe informacion del pto paralelo*/
 193   3              
 194   3                  /*solo de prueba*/    
 195   3              Debug_pto_paralelo(buffer,Length_trama);        
 196   3                Valida_Trama_Pto(buffer,Length_trama);                                /*valido la informacion recibida */
 197   3              
 198   3                  
 199   3              
 200   3               
 201   3              }
 202   2          msj_lcd_informativo();                                                  /*muestra la informacion de  ID cliente, cod parque, fech
             -a,comparacion*/
 203   2        
 204   2      
 205   2          //}
 206   2        }
 207   1      
 208   1      }
 209          
 210          /*------------------------------------------------------------------------------
 211          ------------------------------------------------------------------------------*/
 212          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    434    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    108      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     70    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
