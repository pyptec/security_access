C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PROG
OBJECT MODULE PLACED IN .\Objects\prog.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE prog.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\prog.lst) TABS(2) OBJECT(.\Objects\prog.obj)

line level    source

   1          
   2          #include "prog.h" 
   3          #include <string.h>
   4          extern int printf   (const char *, ...);
   5          extern char putchar (char);
   6          extern char getchar (void);
   7          extern char  *strtok  (char *str, const char *set);
   8          extern char   strcmp  (const char *s1, const char *s2);
   9          extern char  *strcpy  (char *s1, const char *s2);
  10          extern char _getkey (void);
  11          extern char  *strcat  (char *s1, const char *s2);
  12          extern unsigned char rd_eeprom (unsigned char control,unsigned int Dir); 
  13          extern void wr_eeprom (unsigned char control,unsigned int Dir, unsigned char data_eeprom);
  14          extern int sprintf  (char *, const char *, ...);
  15          extern int    atoi (const char *s1);
  16          extern unsigned long int  Read_EEprom_Ticket();
  17          extern void LeerMemoria(unsigned int addres, unsigned char *res);
  18          extern void EscribirMemoria(unsigned int addres,unsigned char *res);
  19          extern int   rand ();
  20          extern void Block_read_clock_ascii(unsigned char *datos_clock);
  21          extern char check_fechaOut(char *buffer);
  22          extern void ByteHex_Decimal(unsigned char *buffer,unsigned char valorhex);
  23          extern unsigned char hex_bcd (unsigned char byte);
  24          extern void hex_ascii(unsigned char * datos,unsigned char * fecha_asii);
  25          extern unsigned char *Lee_No_Ticket();
  26          
  27          unsigned char cursor[20] = "/"; //current working directory
  28          unsigned char validacion [11]={"admin"};  //usuario
  29          
  30          
  31          
  32          
  33          
  34          /*define posiciones de memoria*/
  35          #define EE_ID_CLIENTE           0x0000
  36          #define EE_ID_PARK              0x0002
  37          #define EE_TIEMPO_GRACIA        0x0004
  38          #define EE_SIN_COBRO            0x0006
  39          #define EE_DEBUG                0x0008
  40          #define EE_USE_LPR              0x000A
  41          #define EE_TIPO_PANTALLA        0X000E
  42          #define EE_CARD_AUTOMATIC_BOTON 0x000f
  43          #define EE_HABILITA_APB         0x0010
  44          #define EE_PLACA                0X0011
  45          #define EE_ADDRESS_HIGH_BOARD   0X0012
  46          #define EE_JUST_ONE_TIME_CLAVE  0X0013
  47          #define EE_VALIDA_TIPO_VEHICULO_MENSUAL 0X0014
  48          #define EE_HABILITA_APB_MENSUAL 0X0015
  49          #define EE_MENSUAL_BOCA_ON_OFF  0X0016
  50          #define EE_HORARIO_1            0X0019
  51          #define EE_HORARIO_2            0x0032
  52          #define EE_HORARIO_3            0x004b
  53          #define EE_HORARIO_4            0x0064
  54          #define EE_HORARIO_5            0x007d
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 2   

  55          #define EE_HORARIO_6            0x0096
  56          #define EE_HORARIO_7            0x00af
  57          #define EE_HORARIO_8            0x00c8
  58          #define EE_HORARIO_9            0x00e1
  59          #define EE_HORARIO_10           0x00fa
  60          #define EE_TICKET_ID            0X0200
  61          #define EE_ID_REGISTER          0x0300
  62          #define EE_FECHA_VENCIMIENTO    0X0350
  63          /* Definicion del tamaño de comando y longitud de cmd*/
  64          
  65          #define   NUMCOMMAND 19
  66          #define   LONGSIZE 3
  67          
  68          #define True                    0x01
  69          #define False                   0x00
  70          
  71          
  72          
  73          enum ee_horario_addr{
  74            ee_horario1_addr, ee_horario2_addr, ee_horario3_addr, ee_horario4_addr, ee_horario5_addr,
  75            ee_horario6_addr, ee_horario7_addr, ee_horario8_addr, ee_horario9_addr, ee_horario10_addr,
  76            ee_horarioNULL_addr
  77          };
  78          
  79          
  80          enum Dia_Semana_addr{
  81            Lunes_addr = 1, Martes_addr = 2, Miercoles_addr = 3, Jueves_addr =4, Viernes_addr = 5, 
  82            Sabado_addr = 6, Domingo_addr =0 
  83          };
  84          enum Dia_Semana_data{
  85            Domingo_dato=0x31, Lunes_dato=0x32, Martes_dato=0x33, Miercoles_dato=0x34, Jueves_dato=0x35, Viernes_dato
             -=0x36, Sabado_dato=0x37  
  86          };
  87          enum Hora_Minutos_addr{
  88            Hora_High_addr_Desde = 7, Hora_Low_addr_Desde = 8, Minutos_High_addr_Desde = 9, Minutos_Low_addr_Desde = 
             -10,
  89            Hora_High_addr_Hasta = 11, Hora_Low_addr_Hasta = 12, Minutos_High_addr_Hasta = 13, Minutos_Low_addr_Hasta
             - = 14,
  90            Habilita_addr =15, Segundo_Tiempo=16
  91          };
  92          enum Hora_Minutos_data{
  93              Hora_High_data = 0, Hora_Low_data = 1, Minutos_High_data = 3, Minutos_Low_data =4
  94          };
  95          char comandos[NUMCOMMAND][LONGSIZE]=
  96          {
  97            "0",          //ID_CLIENTEValor del punto cero.
  98            "1",       //COD_PARKTiempo de recolecion entre muestra
  99            "2",    // T_GRACIAInformacion recolectada enviada al rs232
 100            "3",    //SIN_COBROAjuste del cero del sensor
 101            "4",  //DEBUG Calibracion por la curva de la pendiente
 102            "5",    //USE_LPR
 103            "6",      //TIPO_PANTALLA
 104            "7",        // tarjeta automatica o boton
 105            "8",      //habilita apb o inhabilta
 106            "9",      //placa
 107            "10",     // direccion logico
 108            "11",     // prog horario
 109            "12",     // Validar tipo de vehiculo mensual
 110            "13",     // habilita apb para mensual
 111            "14",     // configura mensuales
 112            "15",     // ver comandos programados
 113            "16",     //AYUDA Ayuda!muestra todos los comandos
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 3   

 114            "17",     //SALIRSalir de programacion
 115            "18"      //cmd escondido fecha de vencimiento password
 116          };
 117          
 118          /*------------------------------------------------------------------------------
 119          Rutina que encripta la clave q se le envie
 120          len_clave= longitud de la clave a encriptar
 121          aleatorio=numero aleatoria para escoger el dato a sumar y para la or
 122          
 123          ------------------------------------------------------------------------------*/
 124          unsigned char *hash_id(unsigned char *clave)
 125          {
 126   1        unsigned char len_clave,i;
 127   1        static unsigned int temp, temp1;
 128   1        unsigned char aleatorio []={":[<%?XT]=)" };
 129   1        //unsigned char aleatorio2 []={"@#!\`Fb^&*" };
 130   1        unsigned char suma []={"#*YJAIMEcamiltK"};/*caracteres q se le suman a la trama */
 131   1        unsigned char xxor []={"wrz25q68-91fS.@" };
 132   1        unsigned char usuario1[11];
 133   1        unsigned char vencimiento_password [4];
 134   1        
 135   1        LeerMemoria(EE_FECHA_VENCIMIENTO,vencimiento_password); 
 136   1        if (check_fechaOut(vencimiento_password) != True)
 137   1          
 138   1        {
 139   2          strcpy(aleatorio,"@#!$`Fb^&*");
 140   2        }
 141   1        else
 142   1        {
 143   2          strcpy(aleatorio, ":[<%?XT]=)");
 144   2        }
 145   1        len_clave=strlen(clave);                      /*longitud de la clave a encriptar*/
 146   1          for (i=0; i<10;i++)
 147   1          {
 148   2            temp=*(clave+i)+aleatorio[i];               /*el primer caracter de la clave se le suma con el primero de los 
             -aleatorios*/
 149   2            temp1=temp & 15;                            /*al  resultado se le hace una and con (0x0f)*/
 150   2            if (temp1==0)temp1++; 
 151   2            temp=*(clave+i) + suma[temp1-1];            /*se suma la clave  con el arreglo suma y el valor del arreglo bi
             -ene de  aleatorio el resultado q da en temp */
 152   2            temp1=temp & 15;
 153   2            if (temp1==0)temp1++;
 154   2            temp=temp ^ xxor[temp1-1];                  /*temp se le hace uan xor aleatoria*/
 155   2            if (temp > 255)
 156   2            {
 157   3              temp=temp & 255;
 158   3            }     
 159   2            if ((temp >=122)&&(temp<=255))
 160   2            {
 161   3            temp=temp & 122;
 162   3          
 163   3            }
 164   2            if (temp < 48)
 165   2            {
 166   3            temp=temp+64;
 167   3            }
 168   2            if ((temp>=91)&&(temp<=96))
 169   2            {
 170   3            temp=temp +7 ;
 171   3            }
 172   2            if ((temp>=58)&&(temp<=64))
 173   2            {
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 4   

 174   3            temp=temp - 7 ;
 175   3            }
 176   2            usuario1[i]=temp;
 177   2          
 178   2          }
 179   1          usuario1[i]=0;
 180   1        
 181   1        return usuario1;
 182   1      }
 183          
 184          
 185          /*------------------------------------------------------------------------------
 186          Rutina de lista de comandos 
 187          ------------------------------------------------------------------------------*/
 188          
 189          unsigned char ListaComandos(unsigned char *cmd)
 190          {
 191   1         unsigned char buf[LONGSIZE];
 192   1         unsigned char i;
 193   1         
 194   1         for (i=0; i<NUMCOMMAND; i++)
 195   1         {
 196   2            strcpy(buf, &comandos[i][0]);
 197   2            if (strcmp(buf, cmd)==0)
 198   2               return(i);
 199   2         }
 200   1         
 201   1         return(0xFF);
 202   1      }
 203          
 204          
 205          /*------------------------------------------------------------------------------
 206          Rutina que valida la clave
 207          ------------------------------------------------------------------------------*/
 208          unsigned char  ValidarClave(unsigned char *buffer)
 209          {
 210   1      unsigned char buf [11];
 211   1        
 212   1            strcpy(buf, &validacion[0]);
 213   1            if (strcmp(buf, buffer)==0)
 214   1               return(0);
 215   1       
 216   1         
 217   1         return(0xFF);
 218   1      }
 219          
 220          
 221          
 222          /*------------------------------------------------------------------------------
 223          Rutina que busca el \
 224          ------------------------------------------------------------------------------*/
 225          unsigned char * GetCMD(unsigned char *in)
 226          {
 227   1         char tokens[]=" \r\n";
 228   1         return(strtok(in,tokens));
 229   1      }
 230          
 231          /*------------------------------------------------------------------------------
 232          Rutina de 
 233          ------------------------------------------------------------------------------*/
 234          unsigned char * GetOption(unsigned char *in)
 235          {
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 5   

 236   1         unsigned char tokensSpace[]=" \r\n";
 237   1         unsigned char tokensQuote[]="\"\r\n";
 238   1         
 239   1         //trim leading spaces
 240   1         while (*in==' ')
 241   1            in++;
 242   1         
 243   1         //if first char is a quote, then end token on a quote.  ELSE end token on a space
 244   1         if (*in == '\"')
 245   1            return(strtok(in,tokensQuote));
 246   1         else
 247   1            return(strtok(in,tokensSpace));
 248   1      } 
 249          /*------------------------------------------------------------------------------
 250          Rutina de muestra el cursor
 251          ------------------------------------------------------------------------------*/
 252          
 253          void DisplayCursor(void)
 254          {
 255   1         printf("\r\n\n%s> ", cursor);
 256   1      }
 257          
 258          /*------------------------------------------------------------------------------
 259          Rutina que captura los datos pto serie y los muestra en el pto
 260          ------------------------------------------------------------------------------*/
 261          
 262          void IngresaDato(unsigned char  *buffer, unsigned char modo)
 263          {
 264   1      
 265   1       int i;
 266   1       
 267   1        do
 268   1        { 
 269   2          *buffer = _getkey();
 270   2        if (modo == 0) 
 271   2          {
 272   3             printf("%c", *buffer);
 273   3          }
 274   2          else 
 275   2          {
 276   3            putchar('*');
 277   3          }
 278   2           i=*buffer; 
 279   2           buffer++;
 280   2          *buffer='\0'; 
 281   2          
 282   2        } while(i != '\r');
 283   1          
 284   1            
 285   1               
 286   1      } 
 287          /*
 288          void LeerMemoria(unsigned int  addres,unsigned char  *res)
 289          {
 290          unsigned char i;
 291            do {
 292              *res=rd_eeprom(0xa8,addres);
 293              i=*res;
 294              addres++;
 295              res++;
 296              }while(i !='\0');
 297              *res='\0';
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 6   

 298          }
 299          */
 300          /*------------------------------------------------------------------------------
 301          Rutina que programa el id_cliente en eeprom
 302          ------------------------------------------------------------------------------*/
 303          void prog_id_cliente()
 304          {
 305   1        unsigned char buffer[10];
 306   1        unsigned int dataee;
 307   1        
 308   1        dataee=rd_eeprom(0xa8,EE_ID_CLIENTE);                                         /*se lee el id_cliente actual */
 309   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 310   1        
 311   1        printf("\r\n\n ACTUAL ID_CLIENTE=%s\r\n\n",buffer);                           /*se muestra el id_cliente actual en pan
             -talla*/
 312   1        
 313   1        printf("\r\n\n DIGITE SU NUEVO ID_CLIENTE=");                                 /*digite el nuevo id_cliente*/
 314   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 315   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 316   1        wr_eeprom(0xa8,EE_ID_CLIENTE,dataee);                                         /*grabo el dato en la eeprom*/
 317   1        
 318   1        dataee=rd_eeprom(0xa8,EE_ID_CLIENTE);                                         /*leo el dato grabado*/
 319   1        sprintf(buffer,"%d",dataee);                                                  /*lo convierto a un string*/
 320   1        printf("\r\n\n DATO MODIFICADO ID_CLIENTE=%s\r\n\n",buffer);                  /*lo muetro por la pantalla el dato 
             -grabado*/
 321   1      }
 322          /*------------------------------------------------------------------------------
 323          Rutina que programa el cod_park
 324          ------------------------------------------------------------------------------*/
 325          void prog_cod_park()
 326          {
 327   1        unsigned char buffer[10];
 328   1        unsigned int dataee;
 329   1        
 330   1        dataee=rd_eeprom(0xa8,EE_ID_PARK);                                          /*se lee el id_cliente actual */
 331   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 332   1        
 333   1        printf("\r\n\n ACTUAL COD_PARK=%s\r\n\n",buffer);                           /*se muestra el id_cliente actual en panta
             -lla*/
 334   1        
 335   1        printf("\r\n\n DIGITE SU NUEVO COD_PARK=");                                 /*digite el nuevo id_cliente*/
 336   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 337   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 338   1        wr_eeprom(0xa8,EE_ID_PARK,dataee);                                          /*grabo el dato en la eeprom*/
 339   1        
 340   1        dataee=rd_eeprom(0xa8,EE_ID_PARK);                                          /*leo el dato grabado*/
 341   1        sprintf(buffer,"%d",dataee);                                                  /*lo convierto a un string*/
 342   1        printf("\r\n\n DATO MODIFICADO COD_PARK=%s\r\n\n",buffer);                  /*lo muetro por la pantalla el dato gr
             -abado*/
 343   1      }
 344          /*------------------------------------------------------------------------------
 345          Rutina que programa el tiempo de gracia de cobro (00) no tiene tiempo de gracia
 346          ------------------------------------------------------------------------------*/
 347          void Prog_tiempo_gracia()
 348          {
 349   1        unsigned char buffer[10];
 350   1        unsigned int dataee;
 351   1        
 352   1        dataee=rd_eeprom(0xa8,EE_TIEMPO_GRACIA);                                          /*se lee el id_cliente actual */
 353   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 354   1        
 355   1        printf("\r\n\n ACTUAL TIEMPO_GRACIA=%s\r\n\n",buffer);                            /*se muestra el id_cliente actual en 
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 7   

             -pantalla*/
 356   1        
 357   1        printf("\r\n\n DIGITE SU NUEVO TIEMPO_GRACIA=");                                  /*digite el nuevo id_cliente*/
 358   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 359   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 360   1        wr_eeprom(0xa8,EE_TIEMPO_GRACIA,dataee);                                          /*grabo el dato en la eeprom*/
 361   1        
 362   1        dataee=rd_eeprom(0xa8,EE_TIEMPO_GRACIA);                                        /*leo el dato grabado*/
 363   1        sprintf(buffer,"%d",dataee);                                                  /*lo convierto a un string*/
 364   1        printf("\r\n\n DATO MODIFICADO TIEMPO_GRACIA=%s\r\n\n",buffer);               /*lo muetro por la pantalla el dat
             -o grabado*/
 365   1      }
 366          /*------------------------------------------------------------------------------
 367          Rutina que programa SIN COBRO
 368          SIN_COBRO=0 inhabilitado, SIN_COBRO=1 sin cobro, SIN_COBRO=2 sin cobro y salida el mismo dia");
 369          ------------------------------------------------------------------------------*/
 370          void Prog_Sin_Cobro()
 371          {
 372   1        
 373   1      
 374   1        unsigned char buffer[10];
 375   1        unsigned int dataee;
 376   1      
 377   1        dataee=rd_eeprom(0xa8,EE_SIN_COBRO);                                          /*se lee el id_cliente actual */
 378   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 379   1        if(dataee==0)
 380   1        {
 381   2          printf("\r\n\n ACTUAL SIN_COBRO INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el id_cliente 
             -actual en pantalla*/
 382   2        }
 383   1        else if (dataee==1)
 384   1        {
 385   2          printf("\r\n\n ACTUAL SIN_COBRO GRATIS=%s\r\n\n",buffer);   
 386   2        }
 387   1        else 
 388   1        {
 389   2            printf("\r\n\n ACTUAL SIN_COBRO GRATIS Y SALIDA EL MISMO DIA=%s\r\n\n",buffer);   
 390   2        }
 391   1        
 392   1        printf("\r\n\n DIGITE SU NUEVO SIN_COBRO=");                                  /*digite el nuevo id_cliente*/
 393   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 394   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 395   1        wr_eeprom(0xa8,EE_SIN_COBRO,dataee);                                          /*grabo el dato en la eeprom*/
 396   1        
 397   1        dataee=rd_eeprom(0xa8,EE_SIN_COBRO);                                        /*leo el dato grabado*/
 398   1        sprintf(buffer,"%d",dataee);                                                  /*lo convierto a un string*/
 399   1        if(dataee==0)
 400   1        {
 401   2          printf("\r\n\n ACTUAL SIN_COBRO INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el id_cliente 
             -actual en pantalla*/
 402   2        }
 403   1        else if (dataee==1)
 404   1        {
 405   2          printf("\r\n\n ACTUAL SIN_COBRO GRATIS=%s\r\n\n",buffer);   
 406   2        }
 407   1        else 
 408   1        {
 409   2            printf("\r\n\n ACTUAL SIN_COBRO GRATIS Y SALIDA EL MISMO DIA=%s\r\n\n",buffer);   
 410   2        }
 411   1        
 412   1      }
 413          /*------------------------------------------------------------------------------------
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 8   

 414          Rutina que habilita el debuger
 415           Habilita = 1 ; 
 416          inahabilita = 0;
 417          --------------------------------------------------------------------------------------*/
 418          void Prog_debug()
 419          {
 420   1        unsigned char buffer[10];
 421   1        unsigned int dataee;
 422   1      
 423   1        
 424   1        dataee=rd_eeprom(0xa8,EE_DEBUG);                                          /*se lee el id_cliente actual */
 425   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 426   1        if(dataee==0)
 427   1        {
 428   2          printf("\r\n\n ACTUAL DEBUG INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el id_cliente actu
             -al en pantalla*/
 429   2        }
 430   1        else
 431   1        {
 432   2          printf("\r\n\n ACTUAL DEBUG HABILITADO=%s\r\n\n",buffer);     
 433   2        }
 434   1        
 435   1        printf("\r\n\n DIGITE EL NUEVO ESTADO DE DEBUG=");                                  /*digite el nuevo id_cliente*/
 436   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 437   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 438   1        wr_eeprom(0xa8,EE_DEBUG,dataee);                                          /*grabo el dato en la eeprom*/
 439   1        
 440   1        dataee=rd_eeprom(0xa8,EE_DEBUG);                                        /*leo el dato grabado*/
 441   1        sprintf(buffer,"%d",dataee);  
 442   1        if(dataee==0)
 443   1        {
 444   2          printf("\r\n\n ACTUAL DEBUG INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el id_cliente actu
             -al en pantalla*/
 445   2        }
 446   1        else
 447   1        {
 448   2          printf("\r\n\n ACTUAL DEBUG HABILITADO=%s\r\n\n",buffer);     
 449   2        }
 450   1      }
 451          /*------------------------------------------------------------------------------------
 452          
 453          --------------------------------------------------------------------------------------*/
 454          
 455          void Prog_Use_Lpr()
 456          {
 457   1          unsigned char buffer[10];
 458   1        unsigned int dataee;
 459   1      
 460   1        
 461   1        dataee=rd_eeprom(0xa8,EE_USE_LPR);                                          /*se lee el id_cliente actual */
 462   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 463   1        if(dataee==0)
 464   1        {
 465   2          printf("\r\n\n ACTUAL USE_LPR INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el id_cliente ac
             -tual en pantalla*/
 466   2        }
 467   1        else
 468   1        {
 469   2          printf("\r\n\n ACTUAL USE_LPR HABILITADO=%s\r\n\n",buffer);     
 470   2        }
 471   1        
 472   1        printf("\r\n\n DIGITE EL NUEVO ESTADO DE USE_LPR=");                                  /*digite el nuevo id_cliente*/
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 9   

 473   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 474   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 475   1        wr_eeprom(0xa8,EE_USE_LPR,dataee);                                          /*grabo el dato en la eeprom*/
 476   1        
 477   1        dataee=rd_eeprom(0xa8,EE_USE_LPR);                                        /*leo el dato grabado*/
 478   1        sprintf(buffer,"%d",dataee);  
 479   1        if(dataee==0)
 480   1        {
 481   2          printf("\r\n\n ACTUAL USE_LPR INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el id_cliente ac
             -tual en pantalla*/
 482   2        }
 483   1        else
 484   1        {
 485   2          printf("\r\n\n ACTUAL USE_LPR HABILITADO=%s\r\n\n",buffer);     
 486   2        }
 487   1      }
 488          
 489          /*------------------------------------------------------------------------------------
 490          cmd del tipo de pantalla a usar
 491          Rasberry = 1
 492          lcd = 0
 493          --------------------------------------------------------------------------------------*/
 494          void tipo_pantalla()
 495          {
 496   1        unsigned char buffer[10];
 497   1        unsigned int dataee;
 498   1      
 499   1        
 500   1        dataee=rd_eeprom(0xa8,EE_TIPO_PANTALLA);                                          /*se lee el id_cliente actual */
 501   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 502   1        if(dataee==0)
 503   1        {
 504   2          printf("\r\n\n PANTALLA LCD HABILITADA=%s\r\n\n",buffer);                           /*se muestra el id_cliente actual
             - en pantalla*/
 505   2        }
 506   1        else
 507   1        {
 508   2          printf("\r\n\n PANTALLA RASPBERRY  HABILITADA=%s\r\n\n",buffer);      
 509   2        }
 510   1        
 511   1        printf("\r\n\n DIGITE EL NUEVO ESTADO DE LA PANTALLA =");                                 /*digite el nuevo id_cliente*/
 512   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 513   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 514   1        wr_eeprom(0xa8,EE_TIPO_PANTALLA,dataee);                                          /*grabo el dato en la eeprom*/
 515   1        
 516   1        dataee=rd_eeprom(0xa8,EE_TIPO_PANTALLA);                                        /*leo el dato grabado*/
 517   1        sprintf(buffer,"%d",dataee);  
 518   1        if(dataee==0)
 519   1        {
 520   2          printf("\r\n\n PANTALLA LCD HABILITADA=%s\r\n\n",buffer);                           /*se muestra el id_cliente actual
             - en pantalla*/
 521   2        }
 522   1        else
 523   1        {
 524   2          printf("\r\n\n ACTUAL COMPARACION ACTIVA  HABILITADA=%s\r\n\n",buffer);     
 525   2        }
 526   1        
 527   1      }
 528          void Prog_tarjeta_automatica_o_boton()
 529          {
 530   1        unsigned char buffer[10];
 531   1        unsigned int dataee;
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 10  

 532   1      
 533   1        
 534   1        dataee=rd_eeprom(0xa8,EE_CARD_AUTOMATIC_BOTON);                               //se lee LA CONFIGURACION 
 535   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 536   1        if(dataee==0)
 537   1        {
 538   2          printf("\r\n\n EXPIDE TARJETA PULSANDO BOTON\r\n\n");                           /*se muestra el id_cliente actual en 
             -pantalla*/
 539   2        }
 540   1        else
 541   1        {
 542   2          printf("\r\n\n EXPIDE TARJETA AUTOMATICA\r\n\n");     
 543   2        }
 544   1        
 545   1        printf("\r\n\n DIGITE EL NUEVO ESTADO DEL EXPEDIDOR=");                                 /*digite el nuevo id_cliente*/
 546   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 547   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 548   1        wr_eeprom(0xa8,EE_CARD_AUTOMATIC_BOTON,dataee);                                         /*grabo el dato en la eeprom*/
 549   1        
 550   1        dataee=rd_eeprom(0xa8,EE_CARD_AUTOMATIC_BOTON);                                       /*leo el dato grabado*/
 551   1        sprintf(buffer,"%d",dataee);  
 552   1        if(dataee==0)
 553   1        {
 554   2          printf("\r\n\n EXPIDE TARJETA PULSANDO BOTON\r\n\n");                           /*se muestra el id_cliente actual en 
             -pantalla*/
 555   2        }
 556   1        else
 557   1        {
 558   2          printf("\r\n\n EXPIDE TARJETA AUTOMATICA\r\n\n");     
 559   2        }
 560   1      }
 561          void Prog_AntiPassBack()
 562          {
 563   1        unsigned char buffer[10];
 564   1        unsigned int dataee;
 565   1      
 566   1        
 567   1        dataee=rd_eeprom(0xa8,EE_HABILITA_APB);                                         /*se lee el id_cliente actual */
 568   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 569   1        if(dataee==0)
 570   1        {
 571   2          printf("\r\n\n ACTUAL ANTIPASSBACK INHABILITADO=%s\r\n\n",buffer);                            /*se muestra el id_clien
             -te actual en pantalla*/
 572   2        }
 573   1        else
 574   1        {
 575   2          printf("\r\n\n ACTUAL ANTIPASSBACK HABILITADO=%s\r\n\n",buffer);      
 576   2        }
 577   1        
 578   1        printf("\r\n\n DIGITE EL NUEVO ESTADO DE ANTIPASSBACK=");                                 /*digite el nuevo id_cliente*/
 579   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 580   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 581   1        wr_eeprom(0xa8,EE_HABILITA_APB,dataee);                                         /*grabo el dato en la eeprom*/
 582   1        
 583   1        dataee=rd_eeprom(0xa8,EE_HABILITA_APB);                                       /*leo el dato grabado*/
 584   1        sprintf(buffer,"%d",dataee);  
 585   1        if(dataee==0)
 586   1        {
 587   2          printf("\r\n\n ACTUAL ANTIPASSBACK INHABILITADO=%s\r\n\n",buffer);                            /*se muestra el id_clien
             -te actual en pantalla*/
 588   2        }
 589   1        else
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 11  

 590   1        {
 591   2          printf("\r\n\n ACTUAL ANTIPASSBACK HABILITADO=%s\r\n\n",buffer);      
 592   2        }
 593   1      }
 594          void Prog_Placa()
 595          {
 596   1        unsigned char buffer[10];
 597   1        unsigned int dataee;
 598   1      
 599   1        
 600   1        dataee=rd_eeprom(0xa8,EE_PLACA);                                          /*se lee el id_cliente actual */
 601   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 602   1        if(dataee==0)
 603   1        {
 604   2          printf("\r\n\n ACTUAL PLACA INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el id_cliente actu
             -al en pantalla*/
 605   2        }
 606   1        else
 607   1        {
 608   2          printf("\r\n\n ACTUAL PLACA HABILITADO=%s\r\n\n",buffer);     
 609   2        }
 610   1        
 611   1        printf("\r\n\n DIGITE EL NUEVO ESTADO DE PLACA=");                                  /*digite el nuevo id_cliente*/
 612   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 613   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 614   1        wr_eeprom(0xa8,EE_PLACA,dataee);                                          /*grabo el dato en la eeprom*/
 615   1        
 616   1        dataee=rd_eeprom(0xa8,EE_PLACA);                                        /*leo el dato grabado*/
 617   1        sprintf(buffer,"%d",dataee);  
 618   1        if(dataee==0)
 619   1        {
 620   2          printf("\r\n\n ACTUAL PLACA INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el id_cliente actu
             -al en pantalla*/
 621   2        }
 622   1        else
 623   1        {
 624   2          printf("\r\n\n ACTUAL PLACA HABILITADO=%s\r\n\n",buffer);     
 625   2        }
 626   1      }
 627          void Prog_Address_High_Board()
 628          {
 629   1        unsigned char buffer[10];
 630   1        unsigned int dataee;
 631   1      
 632   1        
 633   1        dataee=rd_eeprom(0xa8,EE_ADDRESS_HIGH_BOARD);                                         /*se lee el id_cliente actual */
 634   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 635   1        if(dataee==0)
 636   1        {
 637   2          printf("\r\n\n ACTUAL ADDRESS_HIGH_BOARD=%s\r\n\n",buffer);                           /*se muestra el id_cliente actu
             -al en pantalla*/
 638   2        }
 639   1        else
 640   1        {
 641   2          printf("\r\n\n ACTUAL ADDRESS_HIGH_BOARD=%s\r\n\n",buffer);     
 642   2        }
 643   1        
 644   1        printf("\r\n\n DIGITE LA NUEVA ADDRESS_HIGH_BOARD=");                                 /*digite el nuevo id_cliente*/
 645   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 646   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 647   1        wr_eeprom(0xa8,EE_ADDRESS_HIGH_BOARD,dataee);                                         /*grabo el dato en la eeprom*/
 648   1        
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 12  

 649   1        dataee=rd_eeprom(0xa8,EE_ADDRESS_HIGH_BOARD);                                       /*leo el dato grabado*/
 650   1        sprintf(buffer,"%d",dataee);  
 651   1        if(dataee==0)
 652   1        {
 653   2          printf("\r\n\n ACTUAL ADDRESS_HIGH_BOARD=%s\r\n\n",buffer);                           /*se muestra el id_cliente actu
             -al en pantalla*/
 654   2        }
 655   1        else
 656   1        {
 657   2          printf("\r\n\n ACTUAL ADDRESS_HIGH_BOARD=%s\r\n\n",buffer);     
 658   2        }
 659   1      }
 660          
 661          unsigned char *Addr_Horarios()
 662          {
 663   1        unsigned char ee_addr_horario[11];
 664   1          /*direcciones de memoria de almacenamiento*/
 665   1        ee_addr_horario[ee_horario1_addr]= EE_HORARIO_1;
 666   1        ee_addr_horario[ee_horario2_addr]= EE_HORARIO_2;
 667   1        ee_addr_horario[ee_horario3_addr]= EE_HORARIO_3;
 668   1        ee_addr_horario[ee_horario4_addr]= EE_HORARIO_4;
 669   1        ee_addr_horario[ee_horario5_addr]= EE_HORARIO_5;
 670   1        ee_addr_horario[ee_horario6_addr]= EE_HORARIO_6;
 671   1        ee_addr_horario[ee_horario7_addr]= EE_HORARIO_7;
 672   1        ee_addr_horario[ee_horario8_addr]= EE_HORARIO_8;
 673   1        ee_addr_horario[ee_horario9_addr]= EE_HORARIO_9;
 674   1        ee_addr_horario[ee_horario10_addr]= EE_HORARIO_10;
 675   1        ee_addr_horario[ee_horarioNULL_addr] = False;
 676   1        return ee_addr_horario;
 677   1      }
 678          unsigned char Prog_Horarios_on_off(unsigned int addr)
 679          {
 680   1        unsigned char buffer[10];
 681   1        unsigned int dataee,habilitado;
 682   1        dataee = rd_eeprom(0xa8,addr);                                          /*se lee el id_cliente actual */
 683   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
 684   1        if(dataee==0)
 685   1        {
 686   2          printf("\r\n\n ACTUAL HORARIO INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el id_cliente ac
             -tual en pantalla*/
 687   2        }
 688   1        else
 689   1        {
 690   2          printf("\r\n\n ACTUAL HORARIO HABILITADO=%s\r\n\n",buffer);     
 691   2        }
 692   1        printf("\r\n\n DIGITE EL NUEVO ESTADO DE HORARIO=");                                  /*digite el nuevo id_cliente*/
 693   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
 694   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 695   1        wr_eeprom(0xa8,addr,dataee);                                          /*grabo el dato en la eeprom*/
 696   1        
 697   1        dataee=rd_eeprom(0xa8,addr);                                        /*leo el dato grabado*/
 698   1        sprintf(buffer,"%d",dataee);  
 699   1        if(dataee==0)
 700   1        {
 701   2          habilitado= False;
 702   2          printf("\r\n\n ACTUAL HORARIO INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el id_cliente ac
             -tual en pantalla*/
 703   2        }
 704   1        else
 705   1        {
 706   2          habilitado=True;
 707   2          printf("\r\n\n ACTUAL HORARIO HABILITADO=%s\r\n\n",buffer);     
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 13  

 708   2        }
 709   1        return habilitado;
 710   1      }
 711          void Prog_Horario_Desde_Hasta(unsigned int addr)
 712          {
 713   1          unsigned char buffer[10];
 714   1          unsigned char dataee;
 715   1        /*la hora de inicio del horario*/
 716   1        
 717   1        printf("\r\n\n Digite Hora 08:00 Minutos Desde: ");
 718   1        IngresaDato(buffer,0);
 719   1        printf("\r\n\n Hora Programada Desde: ");
 720   1        wr_eeprom(0xa8, addr + Hora_High_addr_Desde,buffer[Hora_High_data]);
 721   1        dataee = rd_eeprom(0xa8,addr + Hora_High_addr_Desde);
 722   1        printf("%c",dataee);
 723   1        wr_eeprom(0xa8,addr + Hora_Low_addr_Desde ,buffer[Hora_Low_data]);
 724   1        dataee = rd_eeprom(0xa8,addr + Hora_Low_addr_Desde); //
 725   1        printf("%c:",dataee);
 726   1        wr_eeprom(0xa8,addr + Minutos_High_addr_Desde,buffer[Minutos_High_data]);
 727   1        dataee = rd_eeprom(0xa8,addr + Minutos_High_addr_Desde);
 728   1        printf("%c",dataee);
 729   1        wr_eeprom(0xa8,addr + Minutos_Low_addr_Desde,buffer[Minutos_Low_data]);
 730   1        dataee = rd_eeprom(0xa8,addr +  Minutos_Low_addr_Desde);
 731   1        printf("%c",dataee);
 732   1      
 733   1      /*la hora de final del horario*/
 734   1      
 735   1        printf("\r\n\n Digite Hora:Minutos Hasta: ");
 736   1        IngresaDato(buffer,0);
 737   1        
 738   1        printf("\r\n\n Hora Programada Hasta: ");
 739   1      
 740   1        wr_eeprom(0xa8,addr + Hora_High_addr_Hasta,buffer[Hora_High_data]);
 741   1        dataee = rd_eeprom(0xa8,addr + Hora_High_addr_Hasta);
 742   1        printf("%c",dataee);
 743   1        wr_eeprom(0xa8,addr + Hora_Low_addr_Hasta ,buffer[Hora_Low_data]);
 744   1        dataee = rd_eeprom(0xa8,addr + Hora_Low_addr_Hasta);
 745   1        printf("%c:",dataee);
 746   1        wr_eeprom(0xa8,addr + Minutos_High_addr_Hasta,buffer[Minutos_High_data]);
 747   1        dataee = rd_eeprom(0xa8,addr + Minutos_High_addr_Hasta);
 748   1        printf("%c",dataee);
 749   1        wr_eeprom(0xa8,addr + Minutos_Low_addr_Hasta ,buffer[Minutos_Low_data]);
 750   1        dataee = rd_eeprom(0xa8,addr + Minutos_Low_addr_Hasta);
 751   1        printf("%c",dataee);
 752   1      }
 753          void Ver_Horario_Desde_Hasta(unsigned int addr)
 754          {
 755   1        unsigned char dataee;
 756   1        printf("\r\n Desde  Hasta\r\n");
 757   1        dataee = rd_eeprom(0xa8,addr + Hora_High_addr_Desde);
 758   1        printf(" %c",dataee);
 759   1        dataee = rd_eeprom(0xa8,addr + Hora_Low_addr_Desde); //
 760   1        printf("%c:",dataee);
 761   1        dataee = rd_eeprom(0xa8,addr + Minutos_High_addr_Desde);
 762   1        printf("%c",dataee);
 763   1        dataee = rd_eeprom(0xa8,addr +  Minutos_Low_addr_Desde);
 764   1        printf("%c   ",dataee); 
 765   1          /*hasta*/
 766   1        dataee = rd_eeprom(0xa8,addr + Hora_High_addr_Hasta);
 767   1        printf("%c",dataee);
 768   1        
 769   1        dataee = rd_eeprom(0xa8,addr + Hora_Low_addr_Hasta);
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 14  

 770   1        printf("%c:",dataee);
 771   1        
 772   1        dataee = rd_eeprom(0xa8,addr + Minutos_High_addr_Hasta);
 773   1        printf("%c",dataee);
 774   1        
 775   1        dataee = rd_eeprom(0xa8,addr + Minutos_Low_addr_Hasta);
 776   1        printf("%c",dataee);
 777   1      }
 778          void Prog_Horario_dias(unsigned int addr)
 779          {
 780   1        unsigned char buffer[10];
 781   1        unsigned char dataee, j, temp;
 782   1        /*los dias programados*/
 783   1        printf("\r\n\n Digite los dias a programar Lunes = 2, ");
 784   1        printf("Martes = 3, Miercoles = 4, Jueves = 5, ");
 785   1        printf("Viernes = 6, Sabado = 7, Domingo = 1 : ");
 786   1        IngresaDato(buffer,0);
 787   1        
 788   1        
 789   1        printf("\r\n\n Dias Programados : ");
 790   1        
 791   1        for(j=0; j < 8 ; j++)
 792   1        {
 793   2          
 794   2          if ((temp=buffer[j]) == Lunes_dato) 
 795   2          {
 796   3            printf(" Lunes");
 797   3          
 798   3            wr_eeprom(0xa8,addr+Lunes_addr,Lunes_dato); 
 799   3            dataee=rd_eeprom(0xa8,addr+Lunes_addr); 
 800   3            printf("= %c,",dataee);
 801   3          }
 802   2          
 803   2          if ((temp=buffer[j]) == Martes_dato)
 804   2          {
 805   3            printf(" Martes");
 806   3            wr_eeprom(0xa8,addr+Martes_addr,Martes_dato);
 807   3            dataee=rd_eeprom(0xa8,addr+Martes_addr);  
 808   3            printf("= %c,",dataee);
 809   3          }
 810   2        
 811   2          if ((temp=buffer[j])== Miercoles_dato)
 812   2          {
 813   3            printf(" Miercoles");
 814   3            wr_eeprom(0xa8,addr+Miercoles_addr,Miercoles_dato);
 815   3            dataee=rd_eeprom(0xa8,addr+Miercoles_addr); 
 816   3            printf("= %c,",dataee);
 817   3          }
 818   2          
 819   2          if ((temp=buffer[j]) == Jueves_dato)
 820   2          {
 821   3            printf(" Jueves");
 822   3            wr_eeprom(0xa8,addr+Jueves_addr,Jueves_dato);
 823   3            dataee=rd_eeprom(0xa8,addr+Jueves_addr);  
 824   3            printf("= %c,",dataee);
 825   3          }
 826   2          
 827   2          if ((temp=buffer[j]) == Viernes_dato)
 828   2          { 
 829   3            printf(" Viernes");
 830   3            wr_eeprom(0xa8,addr+Viernes_addr,Viernes_dato);
 831   3            dataee=rd_eeprom(0xa8,addr+Viernes_addr); 
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 15  

 832   3            printf("= %c,",dataee);
 833   3          }
 834   2          
 835   2          if ((temp=buffer[j]) == Sabado_dato) 
 836   2          {
 837   3            printf(" Sabado");
 838   3            wr_eeprom(0xa8,addr+Sabado_addr,Sabado_dato);
 839   3            dataee=rd_eeprom(0xa8,addr+Sabado_addr);  
 840   3            printf("= %c,",dataee);
 841   3          }
 842   2          
 843   2          if ((temp=buffer[j]) == Domingo_dato)
 844   2          {
 845   3            printf(" Domingo");
 846   3            wr_eeprom(0xa8,addr+Domingo_addr,Domingo_dato);
 847   3            dataee = rd_eeprom(0xa8,addr+Domingo_addr); 
 848   3            printf("= %c",dataee);
 849   3          }
 850   2        }
 851   1        
 852   1      }
 853          void Ver_Horario_dias(unsigned int addr)
 854          {
 855   1        unsigned char dataee;
 856   1        /*Lunes*/
 857   1        dataee=rd_eeprom(0xa8,addr+Lunes_addr); 
 858   1          if(dataee == Lunes_dato)
 859   1          {
 860   2          printf(" Lunes = Programado\r\n");
 861   2          }
 862   1          else
 863   1          {
 864   2          printf(" Lunes = No programado\r\n");
 865   2          }
 866   1          /*Martes*/
 867   1          
 868   1          dataee=rd_eeprom(0xa8,addr+Martes_addr);  
 869   1          if(dataee == Martes_dato)
 870   1          {
 871   2          printf(" Martes = Programado\r\n");
 872   2          }
 873   1          else
 874   1          {
 875   2          printf(" Martes = No programado\r\n");
 876   2          }
 877   1          
 878   1          /*Miercoles*/
 879   1          dataee=rd_eeprom(0xa8,addr+Miercoles_addr); 
 880   1          if(dataee == Miercoles_dato)
 881   1          {
 882   2          printf(" Miercoles = Programado\r\n");
 883   2          }
 884   1          else
 885   1          {
 886   2          printf(" Miercoles = No programado\r\n");
 887   2          }
 888   1          /*Jueves*/
 889   1            dataee=rd_eeprom(0xa8,addr+Jueves_addr);  
 890   1          if(dataee == Jueves_dato)
 891   1          {
 892   2          printf(" Jueves = Programado\r\n");
 893   2          }
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 16  

 894   1          else
 895   1          {
 896   2          printf(" Jueves = No programado\r\n");
 897   2          }
 898   1          /*Viernes*/
 899   1            dataee=rd_eeprom(0xa8,addr+Viernes_addr); 
 900   1          if(dataee == Viernes_dato)
 901   1          {
 902   2          printf(" Viernes = Programado\r\n");
 903   2          }
 904   1          else
 905   1          {
 906   2          printf(" Viernes = No programado\r\n");
 907   2          }
 908   1          /*Sabado*/
 909   1          
 910   1            dataee=rd_eeprom(0xa8,addr+Sabado_addr);  
 911   1          if(dataee == Sabado_dato)
 912   1          {
 913   2          printf(" Sabado = Programado\r\n");
 914   2          }
 915   1          else
 916   1          {
 917   2          printf(" Sabado = No programado\r\n");
 918   2          }
 919   1          /*Domingo*/
 920   1          dataee=rd_eeprom(0xa8,addr+Domingo_addr); 
 921   1          if(dataee == Domingo_dato)
 922   1          {
 923   2          printf(" Domingo = Programado\r\n");
 924   2          }
 925   1          else
 926   1          {
 927   2          printf(" Domingo = No programado\r\n");
 928   2          }
 929   1      }
 930          void Prog_Horarios()
 931          {
 932   1        unsigned char buffer[10];
 933   1        unsigned char ee_addr_horario[11];
 934   1        unsigned int addr,temp;
 935   1        unsigned char dataee;
 936   1        unsigned char j;
 937   1        
 938   1        /*direcciones de memoria de almacenamiento*/
 939   1        
 940   1          strcpy (ee_addr_horario,(Addr_Horarios()));
 941   1          
 942   1        /*se programa el banco de horarios del 1 al 10*/
 943   1        
 944   1        printf("\r\n\n Digite el numero del Horario a programar = ");   
 945   1        IngresaDato(buffer,0);  
 946   1        
 947   1        j=(atoi(buffer)) - 1;
 948   1        
 949   1        /*mi direccion eeprom*/
 950   1        
 951   1        addr= ee_addr_horario[j];
 952   1        temp= addr;
 953   1        
 954   1        /*habilita o desabilita el uso del horario*/
 955   1        
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 17  

 956   1        addr =addr + Habilita_addr ;
 957   1        if (Prog_Horarios_on_off(addr) == True);
 958   1        {
 959   2          /*limpiar la memoria*/
 960   2        addr= temp;
 961   2          for(j=Lunes_addr; j < 8 ; j++)
 962   2          {
 963   3            wr_eeprom(0xa8,addr+j,0xff);
 964   3          }
 965   2        
 966   2        addr= temp;
 967   2        /*los dias programados*/
 968   2        
 969   2        Prog_Horario_dias(addr);
 970   2          
 971   2        /*la hora de inicio del horario*/
 972   2        
 973   2        Prog_Horario_Desde_Hasta(addr);
 974   2        
 975   2        /*programo si hay segundo horario*/
 976   2        printf("\r\n\n Programar segundo Horario si=(1) no=(0)= ");   
 977   2        IngresaDato(buffer,0);
 978   2        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
 979   2        wr_eeprom(0xa8,addr+Segundo_Tiempo,dataee);                                         /*grabo el dato en la eeprom*/
 980   2        
 981   2        dataee=rd_eeprom(0xa8,addr+Segundo_Tiempo);                                       /*leo el dato grabado*/
 982   2        sprintf(buffer,"%d",dataee);  
 983   2          if(dataee==True)
 984   2          {
 985   3            /*la hora de inicio del segundo horario*/
 986   3            addr =addr + Minutos_Low_addr_Desde ;
 987   3            Prog_Horario_Desde_Hasta(addr);
 988   3          }
 989   2        }
 990   1        
 991   1      }
 992          void Prog_Validar_Tipo_Vehiculo_Mensual() 
 993          {
 994   1        unsigned char buffer[10];
 995   1        unsigned int dataee;
 996   1      
 997   1        
 998   1        dataee=rd_eeprom(0xa8,EE_VALIDA_TIPO_VEHICULO_MENSUAL);                                         /*se lee el id_cliente actual
             - */
 999   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
1000   1        if(dataee==0)
1001   1        {
1002   2          printf("\r\n\n ACTUAL TIPO_VEHICULO MENSUAL INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el
             - id_cliente actual en pantalla*/
1003   2        }
1004   1        else
1005   1        {
1006   2          printf("\r\n\n ACTUAL TIPO_VEHICULO MENSUAL HABILITADO=%s\r\n\n",buffer);     
1007   2        }
1008   1        
1009   1        printf("\r\n\n DIGITE EL NUEVO ESTADO DE TIPO_VEHICULO MENSUAL=");                                  /*digite el nuevo id_c
             -liente*/
1010   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
1011   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
1012   1        wr_eeprom(0xa8,EE_VALIDA_TIPO_VEHICULO_MENSUAL,dataee);                                         /*grabo el dato en la eeprom*
             -/
1013   1        
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 18  

1014   1        dataee=rd_eeprom(0xa8,EE_VALIDA_TIPO_VEHICULO_MENSUAL);                                       /*leo el dato grabado*/
1015   1        sprintf(buffer,"%d",dataee);  
1016   1        if(dataee==0)
1017   1        {
1018   2          printf("\r\n\n ACTUAL TIPO_VEHICULO MENSUAL INHABILITADO=%s\r\n\n",buffer);                           /*se muestra el
             - id_cliente actual en pantalla*/
1019   2        }
1020   1        else
1021   1        {
1022   2          printf("\r\n\n ACTUAL TIPO_VEHICULO  MENSUAL HABILITADO=%s\r\n\n",buffer);      
1023   2        }
1024   1      }
1025          void Prog_Apb_Mensual()
1026          {
1027   1        unsigned char buffer[10];
1028   1        unsigned int dataee;
1029   1      
1030   1        
1031   1        dataee=rd_eeprom(0xa8,EE_HABILITA_APB_MENSUAL);                                         /*se lee el id_cliente actual */
1032   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
1033   1        if(dataee==0)
1034   1        {
1035   2          printf("\r\n\n ACTUAL ANTIPASSBACK MENSUAL INHABILITADO=%s\r\n\n",buffer);                            /*se muestra el 
             -id_cliente actual en pantalla*/
1036   2        }
1037   1        else
1038   1        {
1039   2          printf("\r\n\n ACTUAL ANTIPASSBACK MENSUAL HABILITADO=%s\r\n\n",buffer);      
1040   2        }
1041   1        
1042   1        printf("\r\n\n DIGITE EL NUEVO ESTADO DE ANTIPASSBACK MENSUAL=");                                 /*digite el nuevo id_cl
             -iente*/
1043   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
1044   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
1045   1        wr_eeprom(0xa8,EE_HABILITA_APB_MENSUAL,dataee);                                         /*grabo el dato en la eeprom*/
1046   1        
1047   1        dataee=rd_eeprom(0xa8,EE_HABILITA_APB_MENSUAL);                                       /*leo el dato grabado*/
1048   1        sprintf(buffer,"%d",dataee);  
1049   1        if(dataee==0)
1050   1        {
1051   2          printf("\r\n\n ACTUAL ANTIPASSBACK MENSUAL INHABILITADO=%s\r\n\n",buffer);                            /*se muestra el 
             -id_cliente actual en pantalla*/
1052   2        }
1053   1        else
1054   1        {
1055   2          printf("\r\n\n ACTUAL ANTIPASSBACK  MENSUAL HABILITADO=%s\r\n\n",buffer);     
1056   2        }
1057   1      }
1058          
1059          void Prog_fecha_vencimiento()
1060          {
1061   1        unsigned char buffer[11];
1062   1        unsigned char *cmd;
1063   1        
1064   1        unsigned char fecha[7];
1065   1        unsigned int dataee;
1066   1      
1067   1        LeerMemoria(EE_FECHA_VENCIMIENTO,buffer);   
1068   1           hex_ascii(buffer,fecha);
1069   1                                    
1070   1        
1071   1        printf("\r\n\n ACTUAL FECHA VENCIMIENTO PASSWORD:%s\r\n\n",fecha);                            /*se muestra el id_client
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 19  

             -e actual en pantalla*/
1072   1          
1073   1         do{
1074   2        printf("\r\n\n/>Id Registro:");
1075   2        LeerMemoria(EE_ID_REGISTER,buffer);
1076   2        printf("%s", buffer);
1077   2        strcpy (validacion,hash_id(buffer));
1078   2        printf("\r\n\n/>Password:");
1079   2        
1080   2          /*para pruebas*/
1081   2        //printf("\r\n\%s ", validacion);
1082   2          
1083   2        IngresaDato(buffer,1);          //ingreso el password por teclado 
1084   2        cmd = GetCMD(buffer);         //quita el carri return 
1085   2        EscribirMemoria(EE_ID_REGISTER,validacion);
1086   2      
1087   2        }while(ValidarClave(cmd)!=0);
1088   1        
1089   1        
1090   1        printf("\r\n\n DIGITE LA NUEVA FECHA DE VENCIMIENTO=");                                 /*digite el nuevo id_cliente*/
1091   1        IngresaDato(buffer,0);  
1092   1        printf("\r\n\n %s\r\n\n",buffer); 
1093   1        
1094   1          fecha[0]=buffer[0]; 
1095   1          fecha[1]=buffer[1]; 
1096   1          fecha[2]=0; 
1097   1          
1098   1          dataee=atoi(fecha);
1099   1          printf("\r\n\n %X",dataee); 
1100   1        /*lo convierto a un dato hex*/
1101   1         wr_eeprom(0xa8,EE_FECHA_VENCIMIENTO,dataee);                                         /*grabo el dato en la eeprom*/
1102   1          fecha[0]=buffer[2]; 
1103   1          fecha[1]=buffer[3]; 
1104   1          fecha[2]=0; 
1105   1          dataee=atoi(fecha);
1106   1          printf("\r\n\n %X",dataee); 
1107   1          wr_eeprom(0xa8,EE_FECHA_VENCIMIENTO+1,dataee);
1108   1          fecha[0]=buffer[4]; 
1109   1          fecha[1]=buffer[5]; 
1110   1          fecha[2]=0; 
1111   1          dataee=atoi(fecha); 
1112   1          printf("\r\n\n %X",dataee);     
1113   1          wr_eeprom(0xa8,EE_FECHA_VENCIMIENTO+2,dataee);
1114   1          wr_eeprom(0xa8,EE_FECHA_VENCIMIENTO+3,0);
1115   1          
1116   1          LeerMemoria(EE_FECHA_VENCIMIENTO,buffer);
1117   1          
1118   1          hex_ascii(buffer,fecha);  
1119   1          printf("\r\n\n ACTUAL FECHA DE VENCIMIENTO PROGRAMADA =%s\r\n\n",fecha);  
1120   1        
1121   1      }
1122          void Ver_Horario()
1123          {
1124   1        unsigned char buffer[10];
1125   1        unsigned char ee_addr_horario[11];
1126   1        unsigned char conta;
1127   1        
1128   1        unsigned int addr,temp;
1129   1        unsigned char dataee;
1130   1        /*direcciones de memoria de almacenamiento*/
1131   1        
1132   1        strcpy (ee_addr_horario,(Addr_Horarios()));
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 20  

1133   1        for (conta=0;conta < 10 ; conta++)
1134   1        {
1135   2        
1136   2        printf("\r\n numero del Horario  programado = %c\r\n",conta+49);
1137   2          
1138   2        /*HORARIO HABILITADO O INHABILITADO*/
1139   2        addr= ee_addr_horario[conta];
1140   2        temp= addr;
1141   2          /*habilita o desabilita el uso del horario*/
1142   2        
1143   2        addr =addr + Habilita_addr ;
1144   2        dataee = rd_eeprom(0xa8,addr);                                          /*se lee el id_cliente actual */
1145   2        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
1146   2          if(dataee == 1)
1147   2          {
1148   3          printf("\r\n  HORARIO HABILITADO  = ON\r\n");                           /*se muestra el id_cliente actual en pantalla
             -*/
1149   3          
1150   3          printf("\r\n Dias Programados\r\n");
1151   3        addr=temp;
1152   3        Ver_Horario_dias(addr);
1153   3        
1154   3        Ver_Horario_Desde_Hasta(addr);
1155   3        dataee=rd_eeprom(0xa8,addr+Segundo_Tiempo);                                       /*leo el dato grabado*/
1156   3        sprintf(buffer,"%d",dataee);  
1157   3            if(dataee==True)
1158   3            {
1159   4            printf("\r\n  SEGUNDO HORARIO HABILITADO  = ON\r\n");
1160   4            /*la hora de inicio del segundo horario*/
1161   4            addr =addr + Minutos_Low_addr_Desde ;
1162   4            Ver_Horario_Desde_Hasta(addr);
1163   4            }
1164   3            else
1165   3            {
1166   4            printf("\r\n SEGUNDO HORARIO HABILITADO  = OFF\r\n");
1167   4            }
1168   3          }
1169   2          else
1170   2          {
1171   3          printf("\r\n  HORARIO HABILITADO  = OFF\r\n");      
1172   3          }
1173   2          
1174   2        }
1175   1        
1176   1          
1177   1      }
1178          void Prog_mensuales()
1179          {
1180   1        unsigned char buffer[10];
1181   1        unsigned int dataee;
1182   1      
1183   1        
1184   1        dataee=rd_eeprom(0xa8,EE_MENSUAL_BOCA_ON_OFF);                                          /*se lee el id_cliente actual */
1185   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
1186   1        if(dataee==0)
1187   1        {
1188   2          printf("\r\n\n ACTUAL MENSUAL POR BOCA INHABILITADO=%s\r\n\n",buffer);                            /*se muestra el id_c
             -liente actual en pantalla*/
1189   2        }
1190   1        else
1191   1        {
1192   2          printf("\r\n\n ACTUAL MENSUAL POR BOCA HABILITADO=%s\r\n\n",buffer);      
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 21  

1193   2        }
1194   1        
1195   1        printf("\r\n\n DIGITE EL NUEVO ESTADO DEL MENSUAL=");                                 /*digite el nuevo id_cliente*/
1196   1        IngresaDato(buffer,0);                                                        /*trae el dato digitado*/
1197   1        dataee=atoi(buffer);                                                          /*lo convierto a un dato hex*/
1198   1        wr_eeprom(0xa8,EE_MENSUAL_BOCA_ON_OFF,dataee);                                          /*grabo el dato en la eeprom*/
1199   1        
1200   1        dataee=rd_eeprom(0xa8,EE_MENSUAL_BOCA_ON_OFF);                                        /*leo el dato grabado*/
1201   1        sprintf(buffer,"%d",dataee);  
1202   1        if(dataee==0)
1203   1        {
1204   2          printf("\r\n\n ACTUAL MENSUAL POR BOCA INHABILITADO=%s\r\n\n",buffer);                            /*se muestra el id_c
             -liente actual en pantalla*/
1205   2        }
1206   1        else
1207   1        {
1208   2          printf("\r\n\n ACTUAL MENSUAL POR BOCA HABILITADO=%s\r\n\n",buffer);      
1209   2        }
1210   1        
1211   1      }
1212          void Ver_Prog()
1213          {
1214   1        unsigned char buffer[10];
1215   1        unsigned int dataee;
1216   1        unsigned char fecha[7];
1217   1        
1218   1        
1219   1        dataee=rd_eeprom(0xa8,EE_ID_CLIENTE);                                         /*se lee el id_cliente actual */
1220   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
1221   1        /*ID programado*/
1222   1        printf("\r\n ID_CLIENTE_PROGRAMADO = %s\r\n",buffer);   
1223   1        /*codigo de parkeadero*/
1224   1        dataee=rd_eeprom(0xa8,EE_ID_PARK);                                          /*se lee el id_cliente actual */
1225   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
1226   1        
1227   1        printf("\r\n COD_PARK_PROGRAMADO = %s\r\n",buffer);     
1228   1        /*estado de debug*/
1229   1        dataee=rd_eeprom(0xa8,EE_DEBUG);                                          /*se lee el id_cliente actual */
1230   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
1231   1        if(dataee==1)
1232   1        {
1233   2          printf("\r\n PROGRAMADO DEBUG = ON\r\n"); 
1234   2        } 
1235   1        else
1236   1        {
1237   2          printf("\r\n PROGRAMADO DEBUG = OFF\r\n");  
1238   2        } 
1239   1        /*Estado del lpr*/
1240   1        dataee=rd_eeprom(0xa8,EE_USE_LPR);                                          /*se lee el id_cliente actual */
1241   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
1242   1        if(dataee==0)
1243   1        {
1244   2          printf("\r\n USE_LPR = OFF\r\n");                           /*se muestra el id_cliente actual en pantalla*/
1245   2        }
1246   1        else
1247   1        {
1248   2          printf("\r\n USE_LPR = ON\r\n");      
1249   2        }
1250   1        /*Tipo de pantalla*/
1251   1        dataee=rd_eeprom(0xa8,EE_TIPO_PANTALLA);                                          /*se lee el id_cliente actual */
1252   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
1253   1        if(dataee==0)
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 22  

1254   1        {
1255   2          printf("\r\n PANTALLA LCD PROGRAMADA\r\n");                           /*se muestra el id_cliente actual en pantalla*/
1256   2        }
1257   1        else
1258   1        {
1259   2          printf("\r\n PANTALLA RASPBERRY  PROGRAMADA\r\n");      
1260   2        }
1261   1        /*MODOde expedicion de tarjeta*/
1262   1        dataee=rd_eeprom(0xa8,EE_CARD_AUTOMATIC_BOTON);                               //se lee LA CONFIGURACION 
1263   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
1264   1        if(dataee==0)
1265   1        {
1266   2          printf("\r\n EXPIDE TARJETA PULSANDO BOTON\r\n");                           /*se muestra el id_cliente actual en pant
             -alla*/
1267   2        }
1268   1        else
1269   1        {
1270   2          printf("\r\n EXPIDE TARJETA AUTOMATICA\r\n");     
1271   2        }
1272   1        /*APB*/
1273   1        dataee=rd_eeprom(0xa8,EE_HABILITA_APB);                                         /*se lee el id_cliente actual */
1274   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
1275   1        if(dataee==0)
1276   1        {
1277   2          printf("\r\n  ANTIPASSBACK = OFF\r\n");                           /*se muestra el id_cliente actual en pantalla*/
1278   2        }
1279   1        else
1280   1        {
1281   2          printf("\r\n ANTIPASSBACK = ON\r\n");     
1282   2        }
1283   1        /*PLACA*/
1284   1        dataee=rd_eeprom(0xa8,EE_PLACA);                                          /*se lee el id_cliente actual */
1285   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
1286   1        if(dataee==0)
1287   1        {
1288   2          printf("\r\n PLACA = OFF\r\n");                           /*se muestra el id_cliente actual en pantalla*/
1289   2        }
1290   1        else
1291   1        {
1292   2          printf("\r\n PLACA = ON\r\n");      
1293   2        }
1294   1        
1295   1        /*DIRECCION*/
1296   1        dataee=rd_eeprom(0xa8,EE_ADDRESS_HIGH_BOARD);                                         /*se lee el id_cliente actual */
1297   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
1298   1        
1299   1          printf("\r\n ACTUAL ADDRESS_HIGH_BOARD = %s\r\n",buffer);                           /*se muestra el id_cliente actual
             - en pantalla*/
1300   1        /*horarios Programados*/
1301   1         Ver_Horario();
1302   1        
1303   1        /*VALIDA TIPO DE VEHICULO EN MENSUAL*/
1304   1        
1305   1        dataee=rd_eeprom(0xa8,EE_VALIDA_TIPO_VEHICULO_MENSUAL);                                         /*se lee el id_cliente actual
             - */
1306   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
1307   1        if(dataee==0)
1308   1        {
1309   2          printf("\r\n TIPO_VEHICULO MENSUAL = OFF\r\n");                           /*se muestra el id_cliente actual en pantal
             -la*/
1310   2        }
1311   1        else
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 23  

1312   1        {
1313   2          printf("\r\n TIPO_VEHICULO MENSUAL = ON\r\n");      
1314   2        }
1315   1        /*APB MENSUAL*/
1316   1        dataee=rd_eeprom(0xa8,EE_HABILITA_APB_MENSUAL);                                         /*se lee el id_cliente actual */
1317   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
1318   1        if(dataee==0)
1319   1        {
1320   2          printf("\r\n ANTIPASSBACK MENSUAL = OFF\r\n");                            /*se muestra el id_cliente actual en pantall
             -a*/
1321   2        }
1322   1        else
1323   1        {
1324   2          printf("\r\n  ANTIPASSBACK MENSUAL = ON\r\n");      
1325   2        }
1326   1          
1327   1        /*MENSUAL POR BOCA */
1328   1        dataee=rd_eeprom(0xa8,EE_MENSUAL_BOCA_ON_OFF);                                          /*se lee el id_cliente actual */
1329   1        sprintf(buffer,"%d",dataee);                                                  /*se convierte  un entero a un string*/
1330   1        if(dataee==0)
1331   1        {
1332   2          printf("\r\nMENSUAL POR BOCA = OFF\r\n");                           /*se muestra el id_cliente actual en pantalla*/
1333   2        }
1334   1        else
1335   1        {
1336   2          printf("\r\n  MENSUAL POR BOCA = ON\r\n");      
1337   2        }
1338   1        
1339   1        /*Fecha de vencimiento clave*/
1340   1        LeerMemoria(EE_FECHA_VENCIMIENTO,buffer);
1341   1          
1342   1          hex_ascii(buffer,fecha);  
1343   1          printf("\r\n ACTUAL FECHA DE VENCIMIENTO PROGRAMADA =%s\r\n",fecha);  
1344   1        /*numero de ticket programado*/
1345   1        
1346   1        strcpy(buffer, Lee_No_Ticket());
1347   1        printf("\r\n Numero de ticket =%s\r\n",buffer); 
1348   1      
1349   1      }
1350          
1351          /*------------------------------------------------------------------------------
1352          Rutina que muestra la lista de comandos
1353          ------------------------------------------------------------------------------*/
1354          void Show()
1355          {
1356   1         printf("\r\n ID_CLIENTE         --- CMD 0 Identificador del cliente maximo 255");
1357   1         printf("\r\n COD_PARK           --- CMD 1 El numero del parqueadero maximo 255");
1358   1         printf("\r\n T_GRACIA           --- CMD 2 Tiempo sin cobro 00,  maximo 255");
1359   1         printf("\r\n SIN_COBRO          --- CMD 3 Inhabilitado= 0, Gratis= 1 , Gratis y salida el mismo dia= 2"
             -);
1360   1         printf("\r\n DEBUG              --- CMD 4 Habilitar = 1, Inhabilitar = 0");
1361   1         printf("\r\n USE_LPR            --- CMD 5 Habilitar = 1, Inhabilitar = 0");
1362   1         printf("\r\n TIPO_PANTALLA      --- CMD 6 PANTALLA LCD =0 PANTALLA RASPBERRI=1");
1363   1         printf("\r\n CARD_AUTOMATICA    --- CMD 7 BOTTON=0 AUTOMATICA=1");
1364   1         printf("\r\n ANTIPASSBACK       --- CMD 8 Habilitar = 1, Inhabilitar = 0");
1365   1         printf("\r\n PLACA              --- CMD 9 Habilitar = 1, Inhabilitar = 0");
1366   1         printf("\r\n ADDRESS_HIGH_BOARD --- CMD 10 La direccion alta del board del numero 5 al 9 sino se usa deb
             -e ir en 0");
1367   1         printf("\r\n HORARIO            --- CMD 11 Progama 10 horarios del 1 al 10");
1368   1         printf("\r\n VALIDA_VEHI_MENSUAL--- CMD 12 Habilitar = 1, Inhabilitar = 0");
1369   1         printf("\r\n USE_APB_MENSUAL    --- CMD 13 Habilitar = 1, Inhabilitar = 0");
1370   1         printf("\r\n MENSUALES          --- CMD 14 Habilitar = 1, Inhabilitar = 0");
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 24  

1371   1         printf("\r\n VER_PROGRAMACION   --- CMD 15 Muestra la programacion");
1372   1         printf("\r\n AYUDA              --- CMD 16 Muestra los comandos");
1373   1         printf("\r\n SALIR              --- CMD 17 Salir de programacion");
1374   1      
1375   1      }
1376          
1377          /*------------------------------------------------------------------------------
1378          Rutina de principal de programacion
1379          ------------------------------------------------------------------------------*/
1380          void  First_Clave()
1381          {
1382   1        unsigned char clave[11];
1383   1        
1384   1        
1385   1          Block_read_clock_ascii(clave);
1386   1          clave[10] = 0;
1387   1          strcpy (validacion,hash_id(clave));
1388   1          EscribirMemoria(EE_ID_REGISTER,validacion);
1389   1          validacion[0]=0x14;
1390   1          validacion[0]=0x0B;
1391   1          validacion[0]=0x14;
1392   1          validacion[0]=0;
1393   1          
1394   1          EscribirMemoria(EE_FECHA_VENCIMIENTO,validacion);
1395   1        
1396   1        
1397   1      }
1398          void menu(void)
1399          {
1400   1      
1401   1      unsigned char *cmd,*option1,*option2;
1402   1      unsigned char opt_buffer[40];
1403   1      unsigned char buffer[20];
1404   1      
1405   1      
1406   1      
1407   1        
1408   1        printf("\r\n\nSistema de Programacion Expedidor \r\n\r\n");
1409   1      
1410   1      
1411   1        
1412   1        
1413   1        if(rd_eeprom(0xa8,EE_JUST_ONE_TIME_CLAVE) != False) 
1414   1        {
1415   2          First_Clave();  
1416   2          wr_eeprom(0xa8,EE_JUST_ONE_TIME_CLAVE,0x0);
1417   2          //printf("%s", buffer);
1418   2        
1419   2        }
1420   1       
1421   1        do{
1422   2        printf("\r\n\n/>Id Registro:");
1423   2        LeerMemoria(EE_ID_REGISTER,buffer);
1424   2        buffer[10]=0;
1425   2        printf("%s", buffer);
1426   2        strcpy (validacion,hash_id(buffer));
1427   2        printf("\r\n\n/>Password:");
1428   2        
1429   2          /*para pruebas*/
1430   2        //printf("\r\n\%s ", validacion);
1431   2          
1432   2        IngresaDato(buffer,0);          //ingreso el password por teclado 
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 25  

1433   2        cmd = GetCMD(buffer);         //quita el carri return 
1434   2        EscribirMemoria(EE_ID_REGISTER,validacion);
1435   2      
1436   2        }while(ValidarClave(cmd)!=0);       //
1437   1      
1438   1        //EscribirMemoria(EE_ID_REGISTER,validacion);
1439   1        
1440   1        Show();
1441   1        while(1)
1442   1        {
1443   2        DisplayCursor();
1444   2      
1445   2      
1446   2          IngresaDato(buffer,0);  
1447   2          cmd = GetCMD(buffer); 
1448   2          option1 = GetOption(cmd + strlen(cmd) + 1);
1449   2          option2 = GetOption(option1 + strlen(option1) + 1);  
1450   2      
1451   2         //si empieza con un '/', eso significa que incluye el caminoa
1452   2            //al archivo.  si el archivo no empieza con un '/', debe agregarce 
1453   2            //la ruta del archivo.
1454   2            if (option1 && (option1[0]=='/'))
1455   2            {
1456   3               //option1 is a full path
1457   3               strcpy(opt_buffer, option1);
1458   3            }
1459   2            else if (option1)
1460   2            {
1461   3               // tack on the current working directory to option1
1462   3               strcpy(opt_buffer, cursor);
1463   3               strcat(opt_buffer, option1);
1464   3            }         
1465   2      
1466   2      
1467   2      
1468   2      
1469   2      
1470   2          if (cmd)
1471   2            {
1472   3               switch(ListaComandos(cmd))
1473   3               {
1474   4                  case 0:                     /*Se programa la identificacion del cliente*/
1475   4                    prog_id_cliente();
1476   4                  
1477   4                   break;
1478   4                  
1479   4                  case 1:  //Tiempo de recolecion entre muestra
1480   4                    prog_cod_park();
1481   4                  break;
1482   4                  case 2:  //Informacion recolectada enviada al rs232
1483   4                    Prog_tiempo_gracia();
1484   4                  break;
1485   4                  case 3:  //Ajuste del cero del sensor
1486   4                    Prog_Sin_Cobro();
1487   4                  break;
1488   4                  case 4:  //Ajuste de calibracion por medio de la pendiente
1489   4                    Prog_debug();
1490   4                  break;
1491   4                  case 5:  //help me
1492   4                    Prog_Use_Lpr();
1493   4                     break;
1494   4                  case 6:     //tipo de pantalla
C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 26  

1495   4                    tipo_pantalla();
1496   4                  break;
1497   4                  case 7:     //tarjeta automatica o pulsador
1498   4                    Prog_tarjeta_automatica_o_boton();
1499   4                  break;
1500   4                  case 8:  //cmd antipassback
1501   4                    Prog_AntiPassBack();
1502   4                  break;
1503   4                  case 9:   //cmd placa
1504   4                    Prog_Placa();
1505   4                  break;
1506   4                  case 10:    //cmd configuracion de la direccion del board
1507   4                    Prog_Address_High_Board();
1508   4                  break;
1509   4                  case 11:    //cmd configuracion los horarios
1510   4                    Prog_Horarios();
1511   4                  break;
1512   4                  case 12:    //cmd configuracion los horarios
1513   4                    Prog_Validar_Tipo_Vehiculo_Mensual();
1514   4                  break;
1515   4                  case 13:    //cmd configuracion los horarios
1516   4                    Prog_Apb_Mensual();
1517   4                  break;
1518   4                  
1519   4                  case 14:  //configura los mensuales por boca
1520   4                    Prog_mensuales();
1521   4                  break;
1522   4                  case 15:  //help me
1523   4                    Ver_Prog();
1524   4                  break;
1525   4                  case 16:  //help me
1526   4                    Show();
1527   4                  break;
1528   4                  case 17:  //salir
1529   4                    return;
1530   4                  break;
1531   4                  case 18:
1532   4                    Prog_fecha_vencimiento();
1533   4                    break;
1534   4          
1535   4                
1536   4                  default:
1537   4                     printf("\r\nComando no existe '%s'", cmd);
1538   4                     break;
1539   4              }
1540   3            }
1541   2        }
1542   1      }
1543          
1544            
1545          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   9369    ----
   CONSTANT SIZE    =   5147    ----
   XDATA SIZE       =     92     509
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.59.0.0   PROG                                                              11/19/2021 16:07:16 PAGE 27  


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
