C51 COMPILER V9.59.0.0   EEPROM                                                            07/26/2021 14:55:00 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\eeprom.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE eeprom.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\eeprom.lst) TABS(2) OBJECT(.\Objects\eeprom.obj)

line level    source

   1          
   2          #include <eeprom.h>
   3          #include <reg51.h>
   4          #include <string.h>
   5          
   6          /*funciones externas*/
   7          extern void          _nop_     (void);
   8          extern void Delay (void);
   9          extern void Delay_20us(unsigned int cnt);
  10          extern void Delay_1ms(unsigned int cnt);
  11          extern long   atol (const char *s1);
  12          extern void Debug_txt_Tibbo(unsigned char * str);
  13          extern int sprintf  (char *, const char *, ...);
  14          extern void Debug_chr_Tibbo(unsigned char Dat);
  15          
  16          //******************************************************************************************
  17          //    RUTINAS DE EEPROM 24FC1025
  18          //******************************************************************************************
  19          sbit sda = P1^2;
  20          sbit scl = P1^3;
  21          //******************************************************************************************
  22          
  23          bit memory_flag;
  24          unsigned char byte_rd;
  25          unsigned char l_data_eeprom;
  26          unsigned char l_chr;
  27          
  28          /*define posiciones de memoria*/
  29          #define EE_ID_CLIENTE   0x0000
  30          
  31          #define EE_TICKET_ID          0X0200
  32          
  33          
  34          //*******************************************************************************************
  35          void ackd(void)
  36          {
  37   1        unsigned int i;
  38   1        memory_flag=1;
  39   1        scl=1;
  40   1        sda=1;
  41   1        for (i=0; i<1100; i++)             //500
  42   1        {
  43   2          if (sda==0)
  44   2          {
  45   3            memory_flag=0;
  46   3          scl=0;
  47   3      
  48   3          break;
  49   3          }
  50   2        }
  51   1        
  52   1        if (memory_flag==1)
  53   1        { 
  54   2      
C51 COMPILER V9.59.0.0   EEPROM                                                            07/26/2021 14:55:00 PAGE 2   

  55   2        }  
  56   1      } 
  57          //*******************************************************************************************
  58          //*******************************************************************************************
  59          void ack_lect(void)
  60          {
  61   1        int i;
  62   1        scl=1;
  63   1        sda=1;
  64   1        memory_flag=1;
  65   1        for (i=0; i<650; i++)
  66   1        {
  67   2          if (sda==0)
  68   2          {
  69   3            memory_flag=0;
  70   3          scl=0;
  71   3          break;
  72   3          }
  73   2        }
  74   1      } 
  75          //*******************************************************************************************
  76          void p_me (void)
  77          {
  78   1          scl=1;
  79   1          _nop_();
  80   1          scl=0;
  81   1      }
  82          //*******************************************************************************************
  83          void e_d_m (unsigned char a_serial_eeprom)
  84          {
  85   1        unsigned char nbits;
  86   1          for (nbits=0; nbits<8; nbits++)
  87   1        {
  88   2          a_serial_eeprom <<=1;
  89   2          if (CY==1)
  90   2          { 
  91   3            sda=1;
  92   3          }
  93   2          else
  94   2          {
  95   3            sda=0;
  96   3          }
  97   2          scl=1;
  98   2          p_me();         
  99   2        }
 100   1        return;
 101   1      }
 102          //********************************************************************************************
 103          void start (void)
 104          {
 105   1        sda=1;
 106   1        scl=1;
 107   1        _nop_();
 108   1        sda=0;
 109   1        scl=0;
 110   1        return;
 111   1      }
 112          //*******************************************************************************************
 113          void stop (void)
 114          {
 115   1        scl=0;
 116   1        sda=0;
C51 COMPILER V9.59.0.0   EEPROM                                                            07/26/2021 14:55:00 PAGE 3   

 117   1        _nop_();
 118   1        scl=1;
 119   1        sda=1;
 120   1        return;
 121   1      }
 122          //*******************************************************************************************
 123          unsigned char l_d_m (void)
 124          {
 125   1        unsigned char nbits;
 126   1          for (nbits=0; nbits<8; nbits++)
 127   1        {
 128   2          scl=0;
 129   2            if (sda==1) 
 130   2            {
 131   3            l_data_eeprom = l_data_eeprom| 0x01;
 132   3            if (nbits<=6) 
 133   3            {
 134   4              l_data_eeprom<<=1;
 135   4              scl=1;
 136   4            }
 137   3            }
 138   2            if (sda==0)
 139   2            {
 140   3              l_data_eeprom = l_data_eeprom & 0xFE;
 141   3            if (nbits<=6) 
 142   3            {
 143   4                l_data_eeprom <<=1;
 144   4              scl=1;
 145   4            }
 146   3            }
 147   2          }
 148   1        scl=0;
 149   1        return l_data_eeprom;
 150   1      }
 151          //*******************************************************************************************
 152          //*******************************************************************************************
 153          //  ESCRIBE EN EEPROM                                   *
 154          //*******************************************************************************************
 155          //void wr_eeprom (unsigned char control,unsigned char dir_h,unsigned char dir_l,unsigned char data_eeprom)
 156          void wr_eeprom (unsigned char control,unsigned int Dir, unsigned char data_eeprom)
 157          {
 158   1        unsigned char dir_h, dir_l;
 159   1        dir_l=Dir;
 160   1        Dir>>=8;
 161   1        dir_h=Dir;
 162   1      
 163   1      
 164   1        scl=0;
 165   1        sda=0;
 166   1      //  wait();
 167   1          start();
 168   1        e_d_m(control);
 169   1        ackd();
 170   1        e_d_m(dir_h);
 171   1        ackd();
 172   1        e_d_m(dir_l);
 173   1        ackd();
 174   1        e_d_m(data_eeprom);
 175   1        ackd();
 176   1        stop();
 177   1        Delay_1ms(13);
 178   1        
C51 COMPILER V9.59.0.0   EEPROM                                                            07/26/2021 14:55:00 PAGE 4   

 179   1        scl=1;
 180   1        sda=1;
 181   1        Delay_20us(98);                   /*wait long*/
 182   1        Delay_20us(98);
 183   1      }
 184          //*******************************************************************************************
 185          //  ESCRIBE EN EEPROM                                   *
 186          //*******************************************************************************************
 187          /*
 188          void wrpage_eeprom (unsigned char control,unsigned char dir_h,unsigned char dir_l,unsigned char data_eepro
             -m)  
 189          {
 190            unsigned int j;
 191            scl=0;
 192            sda=0;
 193            wait();
 194          
 195            wait();
 196          
 197              start();
 198            e_d_m(control);
 199            ack();
 200            e_d_m(dir_h);
 201            ack();
 202            e_d_m(dir_l);
 203            ack();
 204            for (j=0; j<=127; j++)
 205            {
 206              e_d_m(data_eeprom);
 207              ack();
 208            }
 209            stop();
 210            Delay_1ms(13);
 211            scl=1;
 212            sda=1;
 213           return;
 214          }                                              */
 215          //******************************************************************************************* 
 216          //******************************************************************************************* 
 217          //  LEE EN EEPROM                                     *
 218          //*******************************************************************************************
 219          //unsigned char rd_eeprom (unsigned char control,unsigned char dir_h,unsigned char dir_l) 
 220          unsigned char rd_eeprom (unsigned char control,unsigned int Dir) 
 221          {
 222   1      
 223   1        unsigned char dir_h, dir_l;
 224   1        dir_l=Dir;
 225   1        Dir>>=8;
 226   1        dir_h=Dir;
 227   1      
 228   1        scl=0;
 229   1        sda=0;
 230   1       // wait();
 231   1        start();
 232   1        e_d_m(control);
 233   1        ack_lect();
 234   1        e_d_m(dir_h);
 235   1          ack_lect();
 236   1        e_d_m(dir_l);
 237   1        ack_lect();
 238   1        start();
 239   1        e_d_m(control+0x01);
C51 COMPILER V9.59.0.0   EEPROM                                                            07/26/2021 14:55:00 PAGE 5   

 240   1        ackd();
 241   1        scl=0;
 242   1        l_d_m();
 243   1        stop();
 244   1          scl=1;
 245   1        sda=1;
 246   1        return l_data_eeprom;
 247   1      }
 248          /*----------------------------------------------------------------------------------
 249          Funcion q recibe el numero de ticket en un arreglo
 250          error=1 valida los 10 digitos del ticket y si no es numerico los escribe en cero
 251          j= proposito general
 252          Noticket= variable de 32 bits tiene el numero del ticket
 253          -----------------------------------------------------------------------------------*/
 254          void graba_serie(unsigned char *buffer)
 255          {
 256   1        
 257   1        unsigned char  j;
 258   1        unsigned char error=0;
 259   1        
 260   1        
 261   1      /*valido q los datos recibidos sean numericos*/
 262   1        
 263   1        *(buffer+10)=0;
 264   1        
 265   1        for (j=0; j<=9; j++)
 266   1        {
 267   2          if  ((*(buffer+j)<0x30)||(*(buffer+j)>0x39))
 268   2          {
 269   3            error=1;
 270   3            
 271   3            Debug_txt_Tibbo((unsigned char *) "Error de ticket");
 272   3            Debug_txt_Tibbo((unsigned char *) buffer);
 273   3            Debug_txt_Tibbo((unsigned char *) "\n\r");
 274   3          }
 275   2        
 276   2        }
 277   1        
 278   1        
 279   1        /* son numericos*/
 280   1          if (error==0)
 281   1          {
 282   2            Write_EEprom_Ticket(buffer);
 283   2              
 284   2          }
 285   1          else
 286   1          {
 287   2            wr_eeprom(0xa8,EE_TICKET_ID,00);
 288   2            wr_eeprom(0xa8,EE_TICKET_ID+1,00);
 289   2            wr_eeprom(0xa8,EE_TICKET_ID+2,00);
 290   2            wr_eeprom(0xa8,EE_TICKET_ID+3,00);  
 291   2            
 292   2          }
 293   1      }
 294          void Write_EEprom_Ticket(unsigned char *buffer)
 295          {
 296   1        unsigned char  cod_3,cod_2,cod_1,cod_0;
 297   1        unsigned long int Noticket,Bnoticket=0;
 298   1        Debug_txt_Tibbo((unsigned char *) "Numero de ticket:");
 299   1        Debug_txt_Tibbo((unsigned char *) buffer);
 300   1        Debug_txt_Tibbo((unsigned char *) "\n\r");
 301   1        Noticket= atol(buffer);
C51 COMPILER V9.59.0.0   EEPROM                                                            07/26/2021 14:55:00 PAGE 6   

 302   1          
 303   1        Debug_txt_Tibbo((unsigned char *) "No de ticket HEX:");
 304   1        Bnoticket=Noticket>>24;
 305   1        cod_3=Bnoticket;
 306   1        Debug_chr_Tibbo(cod_3);
 307   1          
 308   1        Bnoticket=Noticket >>16;
 309   1        cod_2=Bnoticket;
 310   1        Debug_chr_Tibbo(cod_2);
 311   1            
 312   1        Bnoticket=Noticket >>8;
 313   1        cod_1=Bnoticket;
 314   1        Debug_chr_Tibbo(cod_1);
 315   1            
 316   1        cod_0=Noticket;
 317   1        Debug_chr_Tibbo(cod_0);
 318   1        Debug_txt_Tibbo((unsigned char *) "\n\r");
 319   1            
 320   1        wr_eeprom(0xa8,EE_TICKET_ID,cod_3);
 321   1        wr_eeprom(0xa8,EE_TICKET_ID+1,cod_2);
 322   1        wr_eeprom(0xa8,EE_TICKET_ID+2,cod_1);
 323   1        wr_eeprom(0xa8,EE_TICKET_ID+3,cod_0); 
 324   1      }
 325          /*----------------------------------------------------------------------------------
 326          Procedimiento que lee el No de Ticket en EEprom y lo retorna en un strint
 327          -----------------------------------------------------------------------------------*/
 328          unsigned char *Lee_No_Ticket()
 329          {
 330   1        unsigned long int Noticket;
 331   1        unsigned char Lee_No_Ticket[11];
 332   1        unsigned char num_chr;
 333   1        Noticket=Read_EEprom_Ticket();
 334   1        sprintf( Lee_No_Ticket,"%lu",Noticket);
 335   1        num_chr=strlen(Lee_No_Ticket);
 336   1        Lee_No_Ticket[num_chr] = 0;
 337   1        Debug_txt_Tibbo((unsigned char *) Lee_No_Ticket);
 338   1        Debug_txt_Tibbo((unsigned char *) "\n\r");
 339   1        return Lee_No_Ticket;
 340   1      }
 341          /*----------------------------------------------------------------------------------
 342          Procedimiento que lee el No de Ticket en EEprom y lo retorna en un long int
 343          -----------------------------------------------------------------------------------*/
 344          unsigned long int  Read_EEprom_Ticket()
 345          {
 346   1        unsigned char cod3,cod2,cod1,cod0;
 347   1        unsigned long int Noticket=0;
 348   1        cod3=rd_eeprom(0xa8,EE_TICKET_ID);
 349   1        cod2=rd_eeprom(0xa8,EE_TICKET_ID+1);
 350   1        cod1=rd_eeprom(0xa8,EE_TICKET_ID+2);
 351   1        cod0=rd_eeprom(0xa8,EE_TICKET_ID+3);
 352   1        
 353   1        Noticket=((Noticket| cod3)<<8);
 354   1        Noticket=((Noticket| cod2)<<8);
 355   1        Noticket=((Noticket| cod1)<<8);
 356   1        Noticket=Noticket| cod0;
 357   1        return Noticket;
 358   1      }
 359          /*----------------------------------------------------------------------------------
 360          Procedimiento que incrementa en uno el numero del Ticket y la graba en  EEprom 
 361          -----------------------------------------------------------------------------------*/
 362          void Incremente_Ticket()
 363          {
C51 COMPILER V9.59.0.0   EEPROM                                                            07/26/2021 14:55:00 PAGE 7   

 364   1        
 365   1        unsigned long int Noticket;
 366   1        unsigned char Lee_No_Ticket[11];
 367   1        Noticket=Read_EEprom_Ticket();
 368   1        Noticket=Noticket+1;
 369   1        sprintf( Lee_No_Ticket,"%lu",Noticket);
 370   1        Write_EEprom_Ticket(Lee_No_Ticket);
 371   1      }
 372          
 373          //***********************************************************************************************
 374          //Rutina que lee la eeprom 
 375          //***********************************************************************************************
 376          void LeerMemoria(unsigned int addres, unsigned char *res)
 377            {
 378   1      unsigned char i;
 379   1      do {
 380   2        *res=rd_eeprom(0xa8,addres);;
 381   2        i=*res;
 382   2        addres++;
 383   2        res++;
 384   2      }while(i !='\0');
 385   1        *res='\0';
 386   1        }
 387          void EscribirMemoria(unsigned int addres,unsigned char *res)
 388            {
 389   1      
 390   1      
 391   1      while(*res !='\0'){
 392   2        if(*res =='\r'){*res='\0';}  
 393   2        wr_eeprom(0xa8,addres,*res);
 394   2       
 395   2          addres++;
 396   2          res++;
 397   2        }
 398   1       wr_eeprom(0xa8,addres,*res);
 399   1         addres++;
 400   1          res++;
 401   1        wr_eeprom(0xa8,addres,0);
 402   1      
 403   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1344    ----
   CONSTANT SIZE    =     59    ----
   XDATA SIZE       =      3      55
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
